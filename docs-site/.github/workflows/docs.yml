name: Sync Docs

on:
  push:
    paths:
      - 'package.json' # 루트 package.json 변경 감지
      - 'docs-site/package.json' # docs-site 내부의 변경도 감지 (선택 사항)
    branches:
      - main # 또는 주 브랜치 이름

jobs:
  build-docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs-site # docs-site 디렉토리에서 명령어 실행

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9 # 프로젝트에서 사용하는 pnpm 버전과 일치시키세요

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 프로젝트에서 사용하는 Node.js 버전
          cache: 'pnpm'
          cache-dependency-path: 'docs-site/pnpm-lock.yaml' # docs-site의 lock 파일 경로

      - name: Install Dependencies (Root)
        run: pnpm install --frozen-lockfile
        working-directory: . # 루트에서 pnpm install 실행

      - name: Install Dependencies (docs-site)
        run: pnpm install --frozen-lockfile

      - name: Get Golden Layout Version
        id: glver
        # 루트 package.json에서 버전을 가져오도록 수정
        run: echo "GL_VERSION=$(jq -r '.dependencies["golden-layout"]' ../package.json | tr -d '^~')" >> $GITHUB_OUTPUT
        working-directory: . # 루트 package.json을 읽기 위해 작업 디렉토리 변경

      - name: Fetch and Build Golden Layout Docs
        run: |
          # devdocs를 전역으로 설치하거나 npx를 사용합니다.
          # 여기서는 npx를 사용하며, docs:fetch:gl 스크립트가 이미 docs-site를 기준으로 경로를 잡고 있다고 가정합니다.
          # 실제로는 docs-site 내부에서 상대 경로로 접근해야 할 수 있습니다.
          # 또는, devdocs 명령을 docs-site/package.json 스크립트로 옮기고 npm run을 사용하는 것이 더 깔끔할 수 있습니다.
          # 우선은 루트의 스크립트를 호출하는 방식으로 시도합니다.
          npm run docs:fetch:gl --prefix .. 
          # docs-site/static/docs/golden-layout/${{ steps.glver.outputs.GL_VERSION }} 경로에 저장됨

      - name: Build Internal API Docs
        # typedoc도 루트 package.json의 스크립트를 사용합니다.
        run: npm run docs:build:api --prefix ..
        # docs-site/docs/api 에 생성됨

      - name: Version Docusaurus Docs
        if: steps.glver.outputs.GL_VERSION != '' # 버전 정보가 있을 때만 실행
        run: npm run docusaurus docs:version ${{ steps.glver.outputs.GL_VERSION }}
        # 예: versioned_docs/version-2.6.0 폴더 생성

      - name: Build Docusaurus Site
        run: npm run build # npm run docs:build 와 동일 (docs-site 내부에서 실행)

      - name: Deploy to GitHub Pages (예시)
        # 실제 배포 환경에 맞게 수정 필요 (Vercel, Netlify 등)
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main' # main 브랜치에 푸시될 때만 배포
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs-site/build # Docusaurus 빌드 결과
          # user_name: 'github-actions[bot]' # 선택 사항
          # user_email: 'github-actions[bot]@users.noreply.github.com' # 선택 사항
          # commit_message: 'Deploy Docusaurus site from commit ${{ github.sha }}' # 선택 사항
